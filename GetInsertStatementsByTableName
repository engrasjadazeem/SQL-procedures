-- ================================================
-- Template generated from Template Explorer using:
-- Create Procedure (New Menu).SQL
--
-- Use the Specify Values for Template Parameters
-- command (Ctrl-Shift-M) to fill in the parameter
-- values below.
--
-- This block of comments will not be included in
-- the definition of the procedure.
-- ================================================
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:				Asjad Azeem
-- Create date:		2nd October 2020
-- Description:		SP to create insert statements by table name
-- =============================================
DROP PROCEDURE IF EXISTS dbo.GetInsertStatementsByTableName
GO

CREATE PROCEDURE GetInsertStatementsByTableName
	(@schemaName varchar(100), @tableName varchar(100), @Queries varchar(max) OUTPUT)
AS
BEGIN
	--Declare a cursor to retrieve column specific information
	--for the specified table
	DECLARE cursCol CURSOR FAST_FORWARD FOR
	SELECT column_name,data_type FROM information_schema.columns
		WHERE table_name = @tableName
	OPEN cursCol

	--for storing the first half
	--of INSERT statement
	DECLARE @string varchar(3000)

	--for storing the data
	--(VALUES) related statement
	DECLARE @stringData varchar(max)

	--data types returned
	--for respective columns
	DECLARE @dataType nvarchar(1000)

	--feedback variables
	DECLARE @retval nvarchar(max)
	DECLARE @ParmDefinition nvarchar(500)

	SET @string='INSERT '+'['+ @schemaName +'].[' + @tableName + ']'+'('
	SET @stringData=''

	DECLARE @colName nvarchar(50)

	FETCH NEXT FROM cursCol INTO @colName,@dataType

	IF @@fetch_status<>0
		begin
		print 'Table '+'['+ @schemaName +'].[' + @tableName + ']'+' not found, processing skipped.'
		close curscol
		deallocate curscol
		return
	END

	WHILE @@FETCH_STATUS=0
	BEGIN
	IF @dataType in ('varchar','char','nchar','nvarchar')
	BEGIN
		SET @stringData=@stringData+'''''''''+
				isnull(REPLACE(['+@colName+'], '''''''', ''''''''''''),'''')+'''''',''+'
	END
	ELSE
	if @dataType in ('text','ntext') --if the datatype
									 --is text or something else
	BEGIN
		SET @stringData=@stringData+'''''''''+
			  isnull(REPLACE( cast(['+@colName+'] as varchar(max)), '''''''', ''''''''''''),'''')+'''''',''+'
	END
	ELSE
	IF @dataType = 'money' --because money doesn't get converted
						   --from varchar implicitly
	BEGIN
		SET @stringData=@stringData+'''convert(money,''''''+
			isnull(cast(['+@colName+'] as varchar(200)),''0.0000'')+''''''),''+'
	END
	ELSE
	IF @dataType='datetime'
	BEGIN
		SET @stringData=@stringData+'''convert(datetime,''''''+
			isnull(cast(['+@colName+'] as varchar(200)),''0'')+''''''),''+'
	END
	ELSE
	IF @dataType='image'
	BEGIN
		SET @stringData=@stringData+'''''''''+
		   isnull(cast(convert(varbinary,['+@colName+'])
		   as varchar(6)),''0'')+'''''',''+'
	END
	ELSE
	IF @dataType='uniqueidentifier'
	BEGIN
		SET @stringData=@stringData+'+
			  CASE WHEN ['+ @colName +'] IS NULL then ''NULL'' ELSE '''''''' + cast(['+@colName+'] as varchar(200)) + '''''''' END + '',''+'
	END
	ELSE --presuming the data type is int,bit,numeric,decimal
	BEGIN
		SET @stringData=@stringData+'+
			  CASE WHEN ['+ @colName +'] IS NULL then ''NULL'' ELSE '''''''' + cast(['+@colName+'] as varchar(200)) + '''''''' END + '',''+'
	END

	SET @string=@string+ '[' +@colName+'], '

	FETCH NEXT FROM cursCol INTO @colName,@dataType
	END

	DECLARE @query nvarchar(max) -- provide for the whole query,
                              -- you may increase the size

	SET @query ='SELECT @retvalOUT = coalesce(@retvalOUT, '''', '''') + convert(varchar(max),column1) from '
		+'(SELECT '''+substring(@string,0,len(@string)) + ') VALUES(''+ ' + substring(@stringData,0,len(@stringData)-2)+'''+''); '' + CHAR(10)
		as column1 FROM '+'['+ @schemaName +'].[' + @tableName + ']) as tbl1'
	print @query
	SET @ParmDefinition = N'@retvalOUT varchar(max) OUTPUT'

	EXEC sp_executesql @query, @ParmDefinition, @retvalOUT=@retval OUTPUT; --load and run the built query
	print @retval

	CLOSE cursCol
	DEALLOCATE cursCol

	--print @retval;
	SELECT @Queries = @retval
	-- End of procedure
END
GO
